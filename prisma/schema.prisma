generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  /// Use a custom environment variable for the database connection.
  /// This allows us to rotate credentials without conflicting with
  /// Vercel's default `DATABASE_URL` configuration. See README for details.
  /// The variable name here (`DATABASE_URL_NEW2`) must match the environment
  /// variable configured in Vercel. When changing credentials, set a new
  /// variable name instead of editing an existing one to avoid UI limitations.
  url      = env("DATABASE_URL_NEW2")
}

enum Currency {
  RUB
  EUR
  USD
  TRY
}

enum Role {
  ADMIN
  EDITOR
  VIEWER
}

model Company {
  id        String   @id @default(cuid())
  name      String
  legalName String?
  email     String?
  phone     String?
  website   String?
  address   String?
  logoUrl   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User[]
  quotes    Quote[]
  clients   Client[]
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  role      Role     @default(ADMIN)
  companyId String
  company   Company  @relation(fields: [companyId], references: [id])
  createdAt DateTime @default(now())
}

model Client {
  id        String   @id @default(cuid())
  companyId String
  company   Company  @relation(fields: [companyId], references: [id])
  name      String
  contact   String?
  email     String?
  phone     String?
  createdAt DateTime @default(now())
  quotes    Quote[]
}

model Quote {
  id           String   @id @default(cuid())
  companyId    String
  company      Company  @relation(fields: [companyId], references: [id])
  clientId     String?
  client       Client?  @relation(fields: [clientId], references: [id])
  title        String
  eventDate    DateTime?
  platform     String?
  currency     Currency  @default(RUB)
  usnRate      Int       @default(7)
  discountPct  Int       @default(0)
  notes        String?
  publicToken  String    @unique @default(uuid())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  lines        QuoteLine[]
  terms        Terms?
}

model QuoteLine {
  id        String   @id @default(cuid())
  quoteId   String
  quote     Quote    @relation(fields: [quoteId], references: [id])
  section   String
  name      String
  unit      String
  qty       Decimal  @db.Decimal(12, 2)
  price     Decimal  @db.Decimal(12, 2)
  note      String?
  order     Int      @default(0)
}

model Terms {
  id        String   @id @default(cuid())
  quoteId   String   @unique
  quote     Quote    @relation(fields: [quoteId], references: [id])
  includes  String[]
  excludes  String[]
  payment   String?
  sla       String?
}
